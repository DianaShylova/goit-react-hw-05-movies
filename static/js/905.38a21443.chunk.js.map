{"version":3,"file":"static/js/905.38a21443.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","components/MoviesList/MoviesList.jsx","webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","components/Form/Form.jsx","pages/Movies.jsx","service/moviesApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"backdrop\":\"Loader_backdrop__gjec2\"};","import { Blocks } from \"react-loader-spinner\";\nimport css from \"./Loader.module.css\";\n\nexport const Loader = () => {\n    return (\n        <div className={css.backdrop}>\n            <Blocks\n                visible={true}\n                height=\"80\"\n                width=\"80\"\n                ariaLabel=\"blocks-loading\"\n                wrapperStyle={{}}\n                wrapperClass=\"blocks-wrapper\"\n            />\n\n        </div>\n    );\n};","import { Link, useLocation } from \"react-router-dom\";\n\nexport const MoviesList = ({ movies }) => {\n    \n    const location = useLocation();\n    return (\n        <ul>\n            {movies.map(({ id, original_title }) => (\n                <li key={id}>\n                    <Link to={`/movies/${id}`} state={{ from: location }}>\n                        {original_title}\n                    </Link>\n                </li>\n            ))}\n        </ul>\n    );\n};","// extracted by mini-css-extract-plugin\nexport default {\"form_container\":\"Form_form_container__UGs3C\",\"form\":\"Form_form__e1yzW\",\"input\":\"Form_input__FTtTw\",\"button\":\"Form_button__8NOIT\"};","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport css from \"./Form.module.css\";\n\nexport const Form = ({ onSubmit }) => {\n  const [text, setText] = useState('');\n\n  const handleChange = event => {\n    setText(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!text.trim()) {\n      alert(\"Please, enter text\");\n      return;\n    }\n    console.log(text);\n    onSubmit(text);\n    setText('');\n  };\n\n  return (\n    <>\n      <div className={css.form_container}>\n        <form className={css.form} onSubmit={handleSubmit} >\n          <button type=\"submit\" className={css.button}>\n            Search\n          </button>\n\n          <input\n            value={text}            \n            type=\"text\"           \n            placeholder=\"Search images and photos\"\n            onChange={handleChange}\n            className={css.input}\n          />\n        </form>\n      </div>\n    </>\n  );\n};\n\nForm.propTypes = {\n  onChange: PropTypes.func,\n};","import { MoviesList } from \"../components/MoviesList/MoviesList\";\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from \"react-router-dom\";\nimport { getSearchMovie } from \"../service/moviesApi\";\nimport { Form } from \"../components/Form/Form\"\nimport { Loader } from \"components/Loader/Loader\";\n\n\nconst Movies = () => {\n\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [moviesList, setMoviesList] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const movieTitle = searchParams.get('movieTitle');\n\n    useEffect(() => {\n    console.log(movieTitle);\n        if (!movieTitle) {\n            return;\n        }\n        setIsLoading(true);\n\n        const searchMoviesByName = async () => {\n            try {\n                const searchingMovie = await getSearchMovie(movieTitle);\n                \n                if (searchingMovie.length === 0) {\n                    alert(\"Sorry, nothing find ðŸ˜­\");\n                    return\n                }\n                setMoviesList(searchingMovie);\n            } catch (error) {\n                alert(\"Sorry, something went wrong... ðŸ˜­\");\n            } finally {\n                setIsLoading(false);\n            }\n         };\n        searchMoviesByName();\n        }, [movieTitle]);\n    \n  const handleSubmit = query => {\n    setSearchParams({movieTitle: query });\n  };\nconsole.log(moviesList);\n  return (\n      <div>\n           {isLoading && <Loader />}\n                \n      <Form onSubmit={handleSubmit} nameButton={'Search Film'} />\n      <MoviesList movies={moviesList} />\n    </div>\n  );\n};\n\n\n\nexport default Movies;\n\n\n\n\n","import axios from \"axios\";\n//API Key: f404d8da11cbab86424013df50425b60;\n\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'f404d8da11cbab86424013df50425b60',\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n  return data.results;\n};\n\nexport const getSearchMovie = async (query) => {\n  const { data } = await instance.get(`/search/movie?query=${query}`);\n  return data.results;\n};\n\nexport const getMovieDetails = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}`);\n  return data;\n};\n\nexport const getCast = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}/credits`);\n  return data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}/reviews`);\n  return data.results;\n};"],"names":["Loader","className","css","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","MoviesList","movies","location","useLocation","map","id","original_title","to","state","from","Form","onSubmit","useState","text","setText","event","preventDefault","trim","console","log","alert","type","value","placeholder","onChange","target","useSearchParams","searchParams","setSearchParams","moviesList","setMoviesList","isLoading","setIsLoading","movieTitle","get","useEffect","searchMoviesByName","getSearchMovie","searchingMovie","length","query","nameButton","instance","axios","baseURL","params","api_key","getTrendingMovies","data","results","getMovieDetails","movieId","getCast","cast","getReviews"],"sourceRoot":""}